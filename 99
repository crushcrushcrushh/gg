-- adonis bypasser, open source btw
loadstring(game:HttpGet("https://raw.githubusercontent.com/crushcrushcrushh/gg/refs/heads/main/adonis%20fucker"))()

--[[
  el violador 3000 99 (no vuelvo a hacer esto en mi vida)
--]]

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local SoundService = game:GetService("SoundService")
local Mouse = LocalPlayer:GetMouse()

-- Configuration yesyes
local Settings = {
    SilentAim = true,
    TeamCheck = false,
    WallCheck = true,
    FOV = 100,
    Part = "Head",
    FOVVisible = true,
    RGB = true,
    Prediction = false,
    HorizontalPrediction = 0.1,
    VerticalPrediction = 0.1,
    DetectNPCs = true,
    AntiAimView = true, -- Forcefully turned on‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶
    AntiGroundShot = true, -- Forcefully turned on‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶
    FOVPosition = "Centered" -- "Centered" or "Mouse"
}

-- Audios that never worked LMFAO
local menuSound = Instance.new("Sound")
menuSound.SoundId = "rbxassetid://2556932492"
menuSound.Parent = SoundService

local toggleSound = Instance.new("Sound")
toggleSound.SoundId = "rbxassetid://2556932492"
toggleSound.Parent = SoundService

-- Horrible menu
local ScreenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
ScreenGui.ResetOnSpawn = false

-- FOV (i think it works perfectly)
local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 2
fovCircle.NumSides = 100
fovCircle.Filled = false
fovCircle.Visible = Settings.FOVVisible
fovCircle.Radius = Settings.FOV
fovCircle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)

local openBtn = Instance.new("TextButton")
openBtn.Text = "Open Menu"
openBtn.Size = UDim2.new(0, 150, 0, 40)
openBtn.Position = UDim2.new(0, 20, 0.5, -100)
openBtn.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
openBtn.TextColor3 = Color3.new(1, 1, 1)
openBtn.Parent = ScreenGui
openBtn.Active = true
openBtn.Draggable = true

local menu = Instance.new("Frame")
menu.Size = UDim2.new(0, 450, 0, 400)
menu.Position = UDim2.new(0.5, -225, 0.5, -200)
menu.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
menu.Visible = false
menu.Parent = ScreenGui

local title = Instance.new("TextLabel")
title.Text = "Silent Aim Settings"
title.Font = Enum.Font.SourceSansBold
title.TextSize = 22
title.TextColor3 = Color3.fromHSV(0, 1, 1)
title.Size = UDim2.new(1, 0, 0, 30)
title.Parent = menu

-- Make Tabs
local tabsContainer = Instance.new("Frame")
tabsContainer.Size = UDim2.new(1, 0, 0, 40)
tabsContainer.Position = UDim2.new(0, 0, 0, 30)
tabsContainer.BackgroundTransparency = 1
tabsContainer.Parent = menu

-- Tab 1, Silent Aim
local silentAimTab = Instance.new("TextButton")
silentAimTab.Text = "Silent Aim"
silentAimTab.Size = UDim2.new(0.33, -2, 1, 0)
silentAimTab.Position = UDim2.new(0, 0, 0, 0)
silentAimTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
silentAimTab.TextColor3 = Color3.new(1, 1, 1)
silentAimTab.Parent = tabsContainer

-- Tab 2, target
local targetTab = Instance.new("TextButton")
targetTab.Text = "Target"
targetTab.Size = UDim2.new(0.33, -2, 1, 0)
targetTab.Position = UDim2.new(0.33, 0, 0, 0)
targetTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
targetTab.TextColor3 = Color3.new(1, 1, 1)
targetTab.Parent = tabsContainer

-- Tab 3: FOV
local fovTab = Instance.new("TextButton")
fovTab.Text = "FOV"
fovTab.Size = UDim2.new(0.34, 0, 1, 0)
fovTab.Position = UDim2.new(0.66, 0, 0, 0)
fovTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
fovTab.TextColor3 = Color3.new(1, 1, 1)
fovTab.Parent = tabsContainer

-- Contents for every tab or section or whatever
local scroll = Instance.new("ScrollingFrame", menu)
scroll.Size = UDim2.new(1, 0, 1, -70)
scroll.Position = UDim2.new(0, 0, 0, 70)
scroll.CanvasSize = UDim2.new(0, 0, 1.5, 0)
scroll.ScrollBarThickness = 6
scroll.BackgroundTransparency = 1
scroll.Visible = true

local UIGrid = Instance.new("UIGridLayout", scroll)
UIGrid.CellSize = UDim2.new(0.5, -8, 0, 30)
UIGrid.CellPadding = UDim2.new(0, 6, 0, 6)
UIGrid.SortOrder = Enum.SortOrder.LayoutOrder

-- Function to create buttons
function createToggle(name, default, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.Text = name .. ": " .. (default and "True" or "False")
    btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Parent = scroll

    local state = default
    btn.MouseButton1Click:Connect(function()
        state = not state
        btn.Text = name .. ": " .. (state and "True" or "False")
        callback(state)
        toggleSound:Play()
    end)

    return btn
end

-- Funcion to create options
function createOption(name, options, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Parent = scroll

    local index = 1
    btn.Text = name .. ": " .. options[index]

    btn.MouseButton1Click:Connect(function()
        index = index % #options + 1
        btn.Text = name .. ": " .. options[index]
        callback(options[index])
        toggleSound:Play()
    end)
end

-- Functin to create FOV buttons
function createFOVButtons()
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -10, 0, 30)
    container.BackgroundTransparency = 1
    container.Parent = scroll

    local fovUp = Instance.new("TextButton")
    local fovDown = Instance.new("TextButton")
    
    fovUp.Size = UDim2.new(0.45, 0, 1, 0)
    fovDown.Size = UDim2.new(0.45, 0, 1, 0)
    fovUp.Position = UDim2.new(0.55, 0, 0, 0)
    fovDown.Position = UDim2.new(0, 0, 0, 0)

    fovUp.Text = "+ FOV"
    fovDown.Text = "- FOV"
    
    fovUp.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    fovDown.BackgroundColor3 = Color3.fromRGB(35, 35, 35) 
    fovUp.TextColor3 = Color3.new(1, 1, 1)
    fovDown.TextColor3 = Color3.new(1, 1, 1)
    
    fovUp.Parent = container
    fovDown.Parent = container
    
    fovUp.MouseButton1Click:Connect(function()
        Settings.FOV = math.min(500, Settings.FOV + 10)
        updateFOVSize()
        toggleSound:Play()
    end)
    fovDown.MouseButton1Click:Connect(function()
        Settings.FOV = math.max(10, Settings.FOV - 10)
        updateFOVSize()
        toggleSound:Play()
    end)
end

-- Function so it updates the fov size
function updateFOVSize()
    fovCircle.Radius = Settings.FOV
end

-- Function to create text box to put prediction üëçüëçüëçüëç
function createPredictionInput(name, settingKey)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Text = name .. ": " .. tostring(Settings[settingKey])
    btn.Parent = scroll

    local editing = false

    btn.MouseButton1Click:Connect(function()
        if editing then return end
        editing = true
        btn.Text = ""
        local inputBox = Instance.new("TextBox")
        inputBox.Size = btn.Size
        inputBox.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        inputBox.TextColor3 = Color3.new(1, 1, 1)
        inputBox.Text = tostring(Settings[settingKey])
        inputBox.Parent = btn

        inputBox.FocusLost:Connect(function()
            local value = tonumber(inputBox.Text)
            if value then
                Settings[settingKey] = value
                btn.Text = name .. ": " .. tostring(value)
            else
                btn.Text = name .. ": " .. tostring(Settings[settingKey])
            end
            inputBox:Destroy()
            editing = false
        end)

        inputBox:CaptureFocus()
    end)
end

-- variables to store the buttons for each section or whatever
local silentAimButtons = {}
local targetButtons = {}
local fovButtons = {}

-- Function to update the FOV place based on the setting (center and mouse)
function updateFOVPosition()
    if Settings.FOVPosition == "Centered" then
        fovCircle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
    else -- "Mouse"
        fovCircle.Position = Vector2.new(Mouse.X, Mouse.Y + (game:GetService("GuiService"):GetGuiInset().Y))
    end
end

-- funtion to show and hide sections i think (1 line long omg!! so life changing!!!!)
function showSection(section)
    -- scroll or whatever
    for _, child in ipairs(scroll:GetChildren()) do
        if child:IsA("Frame") or child:IsA("TextButton") then
            child:Destroy()
        end
    end

    -- restore UIGrid üôè
    local UIGrid = Instance.new("UIGridLayout", scroll)
    UIGrid.CellSize = UDim2.new(0.5, -8, 0, 30)
    UIGrid.CellPadding = UDim2.new(0, 6, 0, 6)
    UIGrid.SortOrder = Enum.SortOrder.LayoutOrder

    -- Tabs or sections colors
    silentAimTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    targetTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    fovTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

    if section == "silentaim" then
        silentAimTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        -- Silent Aim Tab
        silentAimButtons.silentAim = createToggle("Silent Aim", Settings.SilentAim, function(v) Settings.SilentAim = v end)
        silentAimButtons.prediction = createToggle("Prediction", Settings.Prediction, function(v) Settings.Prediction = v end)
        silentAimButtons.horizontalPred = createPredictionInput("Horizontal Prediction", "HorizontalPrediction")
        silentAimButtons.verticalPred = createPredictionInput("Vertical Prediction", "VerticalPrediction")
        
    elseif section == "target" then
        targetTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        -- Target Tab
        targetButtons.teamCheck = createToggle("Team Check", Settings.TeamCheck, function(v) Settings.TeamCheck = v end)
        targetButtons.wallCheck = createToggle("Wall Check", Settings.WallCheck, function(v) Settings.WallCheck = v end)
        targetButtons.targetPart = createOption("Target", {"Head", "HumanoidRootPart"}, function(v) Settings.Part = v end)
        targetButtons.detectNPCs = createToggle("Detect NPCs", Settings.DetectNPCs, function(v) Settings.DetectNPCs = v end)
        
    elseif section == "fov" then
        fovTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        -- FOV Tab
        fovButtons.visible = createToggle("Visible FOV", Settings.FOVVisible, function(v) 
            Settings.FOVVisible = v 
            fovCircle.Visible = v
        end)
        fovButtons.rainbow = createToggle("Rainbow FOV", Settings.RGB, function(v) Settings.RGB = v end)
        fovButtons.position = createOption("FOV Position", {"Centered", "Mouse"}, function(v) 
            Settings.FOVPosition = v 
            updateFOVPosition()
        end)
        createFOVButtons()
    end
end

-- Conect Tabs 
silentAimTab.MouseButton1Click:Connect(function()
    showSection("silentaim")
    toggleSound:Play()
end)

targetTab.MouseButton1Click:Connect(function()
    showSection("target")
    toggleSound:Play()
end)

fovTab.MouseButton1Click:Connect(function()
    showSection("fov")
    toggleSound:Play()
end)

-- show tab by default
showSection("silentaim")

openBtn.MouseButton1Click:Connect(function()
    menu.Visible = not menu.Visible
    menuSound:Play()
end)

-- Thing to make the fov rainbow
local hue = 0

RunService.RenderStepped:Connect(function()
    fovCircle.Visible = Settings.FOVVisible
    fovCircle.Radius = Settings.FOV
    updateFOVPosition()
    
    if Settings.RGB then
        hue = (hue + 0.01) % 1
        local color = Color3.fromHSV(hue, 1, 1)
        fovCircle.Color = color
        title.TextColor3 = color
    else
        fovCircle.Color = Color3.fromRGB(255, 255, 255)
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
    end
end)

function isNPC(character)
    local player = Players:GetPlayerFromCharacter(character)
    if not player then
        return true
    end
    
    -- Verify if its an npc by commonly used names
    local npcNames = {"Bot", "NPC", "Enemy", "Zombie", "Monster", "Guard", "Soldier", "AI", "Dummy", "Target"}
    local characterName = character.Name:lower()
    
    for _, npcName in ipairs(npcNames) do
        if characterName:find(npcName:lower()) then
            return true
        end
    end
    
    if character:FindFirstChild("AI") or character:FindFirstChild("AIController") or character:FindFirstChild("NPCScript") then
        return true
    end
    
    -- veriy NPC properties wohoo yay!!!
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        if humanoid.DisplayDistanceType == Enum.HumanoidDisplayDistanceType.None then
            return true
        end
    end
    
    return false
end

function isVisible(targetPart)
    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).Unit * (targetPart.Position - origin).Magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, targetPart.Parent}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local result = workspace:Raycast(origin, direction, raycastParams)
    return not result
end

-- NPC detection interval
local npcCache = {}
local lastNPCCheck = 0
local NPC_CHECK_INTERVAL = 2 -- Segundos entre b√∫squedas de NPCs
function updateNPCCache()
    if not Settings.DetectNPCs then
        return
    end
    
    local currentTime = tick()
    if currentTime - lastNPCCheck < NPC_CHECK_INTERVAL then
        return
    end
    
    lastNPCCheck = currentTime
    npcCache = {}
    
    -- Search NPC's in all the game (i think it works)
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj ~= LocalPlayer.Character then
            local humanoid = obj:FindFirstChild("Humanoid")
            local rootPart = obj:FindFirstChild("HumanoidRootPart")
            
            if humanoid and rootPart and humanoid.Health > 0 then
                -- verify if its an npzzz
                if isNPC(obj) then
                    local part = obj:FindFirstChild(Settings.Part)
                    if not part then part = rootPart end
                    
                    table.insert(npcCache, {
                        model = obj,
                        part = part,
                        rootPart = rootPart,
                        humanoid = humanoid
                    })
                end
            end
        end
    end
end

  

   -- Search in between real players
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("Humanoid") and p.Character:FindFirstChild("HumanoidRootPart") then
            if p.Character.Humanoid.Health <= 0 then continue end
            -- TeamCheck only applies for real players
            if Settings.TeamCheck and p.Team == LocalPlayer.Team then continue end
            local part = p.Character:FindFirstChild(Settings.Part)
            if not part then continue end
            local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
            if not onScreen then continue end
            
            local referencePoint
            if Settings.FOVPosition == "Centered" then
                referencePoint = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
            else
                referencePoint = Vector2.new(Mouse.X, Mouse.Y)
            end
            
            local distance = (Vector2.new(screenPos.X, screenPos.Y) - referencePoint).Magnitude
            if distance < Closest then
                if Settings.WallCheck and not isVisible(part) then continue end
                Target = p
                Closest = distance
            end
        end
    end
    
    -- See if the Npc function thing is turned on
    if Settings.DetectNPCs then
        updateNPCCache()
        
        for _, npcData in ipairs(npcCache) do
            if npcData.humanoid.Health > 0 then
                local part = npcData.part
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if not onScreen then continue end
                
                local referencePoint
                if Settings.FOVPosition == "Centered" then
                    referencePoint = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
                else
                    referencePoint = Vector2.new(Mouse.X, Mouse.Y)
                end
                
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - referencePoint).Magnitude
                if distance < Closest then
                    if Settings.WallCheck and not isVisible(part) then continue end
                    Target = {Character = npcData.model}
                    Closest = distance
                end
            end
        end
    end
    
    return Target
end

-- silent functions
local Prey = nil

function FilterObjs(Object)
    if string.find(Object.Name, "Gun") then
        return
    end
    if table.find({"Part", "MeshPart", "BasePart"}, Object.ClassName) then
        return true
    end
end

function GetClosestBodyPart(character)
    local ClosestDistance = 1 / 0
    local BodyPart = nil
    if character and character:GetChildren() then
        for _, x in next, character:GetChildren() do
            if FilterObjs(x) then
                local screenPos, onScreen = Camera:WorldToViewportPoint(x.Position)
                if onScreen then
                    local referencePoint
                    if Settings.FOVPosition == "Centered" then
                        referencePoint = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
                    else
                        referencePoint = Vector2.new(Mouse.X, Mouse.Y)
                    end
                    local distance = (Vector2.new(screenPos.X, screenPos.Y) - referencePoint).Magnitude
                    if distance < fovCircle.Radius and distance < ClosestDistance then
                        ClosestDistance = distance
                        BodyPart = x
                    end
                end
            end
        end
    end
    return BodyPart
end

function ClosestPlrFromMouse()
    local Target, Closest = nil, Settings.FOV

-- Silent metatable hook (i thknk i said that right LMFAO)
local grmt = getrawmetatable(game)
local backupindex = grmt.__index
setreadonly(grmt, false)

grmt.__index = newcclosure(function(self, v)
    if Settings.SilentAim and Mouse and tostring(v) == "Hit" then
        Prey = ClosestPlrFromMouse()
        if Prey and Prey.Character and Prey.Character:FindFirstChild(Settings.Part) then
            local targetPart = Prey.Character[Settings.Part]
            local endpoint = targetPart.CFrame
            
            -- apply pred
            if Settings.Prediction then
                local targetVelocity = targetPart.AssemblyLinearVelocity or targetPart.Velocity
                endpoint = targetPart.CFrame + (targetVelocity * Settings.HorizontalPrediction)
                
                -- Apply vertical pred
                if Settings.VerticalPrediction > 0 then
                    endpoint = endpoint + Vector3.new(0, targetVelocity.Y * Settings.VerticalPrediction, 0)
                end
            end
            
            return tostring(v) == "Hit" and endpoint
        end
    end
    return backupindex(self, v)
end)

setreadonly(grmt, true)


-- Anti Aim Viewer (tysm jai)
task.spawn(function()
    while task.wait() do
        if Settings.AntiAimView then
            local closestDistance = math.huge
            local closestPlayer = nil

            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                    local screenPos = Camera:WorldToViewportPoint(player.Character.Head.Position)
                    local referencePoint
                    if Settings.FOVPosition == "Centered" then
                        referencePoint = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
                    else
                        referencePoint = Vector2.new(Mouse.X, Mouse.Y)
                    end
                    local distance = (referencePoint - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    if distance < closestDistance then
                        closestPlayer = player
                        closestDistance = distance
                    end
                end
            end
        end
    end
end)

-- Anti-Ground Shots (tysm jai)
task.spawn(function()
    while task.wait() do
        if Prey and Prey.Character and Prey.Character:FindFirstChild("Humanoid") then
            local humanoid = Prey.Character.Humanoid
            if humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                pcall(function()
                    local TargetVelv5 = Prey.Character[Settings.Part]
                    if TargetVelv5 then
                        TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, (TargetVelv5.Velocity.Y * 5), TargetVelv5.Velocity.Z)
                        if TargetVelv5:IsA("BasePart") then
                            TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, (TargetVelv5.Velocity.Y * 5), TargetVelv5.Velocity.Z)
                        end
                    end
                end)
            end
        end
    end
end)

-- resolver (probably works)
task.spawn(function()
    while task.wait() do
        if Prey and Prey.Character and Prey.Character:FindFirstChild("HumanoidRootPart") then
            pcall(function()
                local TargetVelv2 = Prey.Character.HumanoidRootPart
                TargetVelv2.Velocity = Vector3.new(TargetVelv2.Velocity.X, 0, TargetVelv2.Velocity.Z)
                if TargetVelv2:IsA("BasePart") then
                    TargetVelv2.AssemblyLinearVelocity = Vector3.new(TargetVelv2.Velocity.X, 0, TargetVelv2.Velocity.Z)
                end
            end)
        end
    end
end)
