--[[
  el violador 3000 99 (con detección forzada de NPCs y Team Check)
--]]

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local SoundService = game:GetService("SoundService")

-- Configuracion si
local Settings = {
    Aimbot = true,
    TeamCheck = false,
    WallCheck = true,
    FOV = 100,
    Part = "Head",
    FOVVisible = true,
    RGB = true,
    AimStrength = 0.5,
    Prediction = false,
    HorizontalPrediction = 0.1870,
    VerticalPrediction = 0.07, --Predetermknado
    DetectNPCs = true,
}

-- Audios que probablemente no sirven (no sirvio)
local menuSound = Instance.new("Sound")
menuSound.SoundId = "rbxassetid://2556932492"
menuSound.Parent = SoundService

local toggleSound = Instance.new("Sound")
toggleSound.SoundId = "rbxassetid://2556932492"
toggleSound.Parent = SoundService

-- Menu todo cuyeyo
local ScreenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
ScreenGui.ResetOnSpawn = false

local openBtn = Instance.new("TextButton")
openBtn.Text = "Open Menu"
openBtn.Size = UDim2.new(0, 150, 0, 40)
openBtn.Position = UDim2.new(0, 20, 0.5, -100)
openBtn.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
openBtn.TextColor3 = Color3.new(1, 1, 1)
openBtn.Parent = ScreenGui
openBtn.Active = true
openBtn.Draggable = true

local menu = Instance.new("Frame")
menu.Size = UDim2.new(0, 450, 0, 350)
menu.Position = UDim2.new(0.5, -225, 0.5, -175)
menu.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
menu.Visible = false
menu.Parent = ScreenGui

local title = Instance.new("TextLabel")
title.Text = "Settings"
title.Font = Enum.Font.SourceSansBold
title.TextSize = 22
title.TextColor3 = Color3.fromHSV(0, 1, 1)
title.Size = UDim2.new(1, 0, 0, 30)
title.Parent = menu

local scroll = Instance.new("ScrollingFrame", menu)
scroll.Size = UDim2.new(1, 0, 1, -30)
scroll.Position = UDim2.new(0, 0, 0, 30)
scroll.CanvasSize = UDim2.new(0, 0, 1.5, 0)
scroll.ScrollBarThickness = 6
scroll.BackgroundTransparency = 1

local UIGrid = Instance.new("UIGridLayout", scroll)
UIGrid.CellSize = UDim2.new(0.5, -8, 0, 30)
UIGrid.CellPadding = UDim2.new(0, 6, 0, 6)
UIGrid.SortOrder = Enum.SortOrder.LayoutOrder

function createToggle(name, default, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.Text = name .. ": " .. (default and "True" or "False")
    btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Parent = scroll

    local state = default
    btn.MouseButton1Click:Connect(function()
        state = not state
        btn.Text = name .. ": " .. (state and "True" or "False")
        callback(state)
        toggleSound:Play()
    end)

    return btn
end

function createOption(name, options, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Parent = scroll

    local index = 1
    btn.Text = name .. ": " .. options[index]

    btn.MouseButton1Click:Connect(function()
        index = index % #options + 1
        btn.Text = name .. ": " .. options[index]
        callback(options[index])
        toggleSound:Play()
    end)
end

--Para el FOV de subir y bajar
function createFOVButtons()
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -10, 0, 30)
    container.BackgroundTransparency = 1
    container.Parent = scroll

    local fovUp = Instance.new("TextButton")
    local fovDown = Instance.new("TextButton")
    
    fovUp.Size = UDim2.new(0.45, 0, 1, 0)
    fovDown.Size = UDim2.new(0.45, 0, 1, 0)
    fovUp.Position = UDim2.new(0.55, 0, 0, 0)
    fovDown.Position = UDim2.new(0, 0, 0, 0)

    fovUp.Text = "+ FOV"
    fovDown.Text = "- FOV"
    
    fovUp.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    fovDown.BackgroundColor3 = Color3.fromRGB(35, 35, 35) 
    fovUp.TextColor3 = Color3.new(1, 1, 1)
    fovDown.TextColor3 = Color3.new(1, 1, 1)
    
    fovUp.Parent = container
    fovDown.Parent = container
    
    fovUp.MouseButton1Click:Connect(function()
        Settings.FOV = math.min(1000, Settings.FOV + 10)
        toggleSound:Play()
    end)
    fovDown.MouseButton1Click:Connect(function()
        Settings.FOV = math.max(10, Settings.FOV - 10)
        toggleSound:Play()
    end)
end

--Aiñ Strength
function createAimStrengthInput()
    local aimStrengthBtn = Instance.new("TextButton")
    aimStrengthBtn.Size = UDim2.new(1, -10, 0, 30)
    aimStrengthBtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    aimStrengthBtn.TextColor3 = Color3.new(1, 1, 1)
    aimStrengthBtn.Text = "Aim Strength: " .. tostring(Settings.AimStrength)
    aimStrengthBtn.Parent = scroll

    local editing = false

    aimStrengthBtn.MouseButton1Click:Connect(function()
        if editing then return end
        editing = true
        aimStrengthBtn.Text = ""
        local inputBox = Instance.new("TextBox")
        inputBox.Size = aimStrengthBtn.Size
        inputBox.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        inputBox.TextColor3 = Color3.new(1, 1, 1)
        inputBox.Text = tostring(Settings.AimStrength)
        inputBox.Parent = aimStrengthBtn

        inputBox.FocusLost:Connect(function()
            local value = tonumber(inputBox.Text)
            if value and value >= 0.1 and value <= 1.0 then
                Settings.AimStrength = value
                aimStrengthBtn.Text = "Aim Strength: " .. tostring(value)
            else
                aimStrengthBtn.Text = "Aim Strength: " .. tostring(Settings.AimStrength)
            end
            inputBox:Destroy()
            editing = false
        end)

        inputBox:CaptureFocus()
    end)
end

-- numerico o algo de para o nose de prediccion
function createPredictionInput(name, settingKey)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Text = name .. ": " .. tostring(Settings[settingKey])
    btn.Parent = scroll

    local editing = false

    btn.MouseButton1Click:Connect(function()
        if editing then return end
        editing = true
        btn.Text = ""
        local inputBox = Instance.new("TextBox")
        inputBox.Size = btn.Size
        inputBox.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        inputBox.TextColor3 = Color3.new(1, 1, 1)
        inputBox.Text = tostring(Settings[settingKey])
        inputBox.Parent = btn

        inputBox.FocusLost:Connect(function()
            local value = tonumber(inputBox.Text)
            if value then
                Settings[settingKey] = value
                btn.Text = name .. ": " .. tostring(value)
            else
                btn.Text = name .. ": " .. tostring(Settings[settingKey])
            end
            inputBox:Destroy()
            editing = false
        end)

        inputBox:CaptureFocus()
    end)
end

-- Botones s
local aimbotBtn = createToggle("Aimbot", Settings.Aimbot, function(v) Settings.Aimbot = v end)
createToggle("Team Check", Settings.TeamCheck, function(v) Settings.TeamCheck = v end) -- RESTAURADO
createToggle("Wall Check", Settings.WallCheck, function(v) Settings.WallCheck = v end)
createToggle("Visible FOV", Settings.FOVVisible, function(v) Settings.FOVVisible = v end)
createToggle("Rainbow Fov", Settings.RGB, function(v) Settings.RGB = v end)
local detectNPCsBtn = createToggle("Detect NPCs", Settings.DetectNPCs, function(v) 
    Settings.DetectNPCs = v 
end)
createOption("Target", {"Head", "HumanoidRootPart"}, function(v) Settings.Part = v end)
createFOVButtons()
createAimStrengthInput()
createToggle("Prediction", Settings.Prediction, function(v) Settings.Prediction = v end)
createPredictionInput("Horizontal Prediction", "HorizontalPrediction")
createPredictionInput("Vertical Prediction", "VerticalPrediction")

openBtn.MouseButton1Click:Connect(function()
    menu.Visible = not menu.Visible
    menuSound:Play()
end)

-- FOV
local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 2
fovCircle.NumSides = 100
fovCircle.Filled = false

local hue = 0

RunService.RenderStepped:Connect(function()
    fovCircle.Visible = Settings.FOVVisible
    fovCircle.Radius = Settings.FOV
    fovCircle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
    if Settings.RGB then
        hue = (hue + 1) % 360
        fovCircle.Color = Color3.fromHSV(hue/360, 1, 1)
    else
        fovCircle.Color = Color3.fromRGB(255, 255, 255)
    end
    title.TextColor3 = Settings.RGB and Color3.fromHSV(hue/360, 1, 1) or Color3.fromRGB(255, 255, 255)
end)

function isNPC(character)
    local player = Players:GetPlayerFromCharacter(character)
    if not player then
        return true
    end
    
    -- verigicar por nombres que normalmente se usan
    local npcNames = {"Bot", "NPC", "Enemy", "Zombie", "Monster", "Guard", "Soldier", "AI", "Dummy", "Target"}
    local characterName = character.Name:lower()
    
    for _, npcName in ipairs(npcNames) do
        if characterName:find(npcName:lower()) then
            return true
        end
    end
    
    if character:FindFirstChild("AI") or character:FindFirstChild("AIController") or character:FindFirstChild("NPCScript") then
        return true
    end
    
    -- verificar propiedades de npc
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        if humanoid.DisplayDistanceType == Enum.HumanoidDisplayDistanceType.None then
            return true
        end
    end
    
    return false
end

function isVisible(targetPart)
    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).Unit * (targetPart.Position - origin).Magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, targetPart.Parent}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local result = workspace:Raycast(origin, direction, raycastParams)
    return not result
end

-- temporizador de buscar npcs 
local npcCache = {}
local lastNPCCheck = 0
local NPC_CHECK_INTERVAL = 2 -- Segundos entre búsquedas de NPCs
function updateNPCCache()
    if not Settings.DetectNPCs then
        return
    end
    
    local currentTime = tick()
    if currentTime - lastNPCCheck < NPC_CHECK_INTERVAL then
        return
    end
    
    lastNPCCheck = currentTime
    npcCache = {}
    
    -- Buscar npcs por todo el juego (creo que funciona)
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj ~= LocalPlayer.Character then
            local humanoid = obj:FindFirstChild("Humanoid")
            local rootPart = obj:FindFirstChild("HumanoidRootPart")
            
            if humanoid and rootPart and humanoid.Health > 0 then
                -- verificar si es npc
                if isNPC(obj) then
                    local part = obj:FindFirstChild(Settings.Part)
                    if not part then part = rootPart end
                    
                    table.insert(npcCache, {
                        model = obj,
                        part = part,
                        rootPart = rootPart,
                        humanoid = humanoid
                    })
                end
            end
        end
    end
end

function getClosest()
    local closest, dist = nil, Settings.FOV
    
    -- buscar entre jugadores reales
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("Humanoid") and p.Character:FindFirstChild("HumanoidRootPart") then
            if p.Character.Humanoid.Health <= 0 then continue end
            -- TeamCheck aplica solo a jugadores reales
            if Settings.TeamCheck and p.Team == LocalPlayer.Team then continue end
            local part = p.Character:FindFirstChild(Settings.Part)
            if not part then continue end
            local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
            if not onScreen then continue end
            local distance = (Vector2.new(screenPos.X, screenPos.Y) - Camera.ViewportSize/2).Magnitude
            if distance < dist then
                if Settings.WallCheck and not isVisible(part) then continue end
                closest = part
                dist = distance
            end
        end
    end
    
    -- ver si la funcion de detectar npcs esta activada
    if Settings.DetectNPCs then
        updateNPCCache()
        
        for _, npcData in ipairs(npcCache) do
            if npcData.humanoid.Health > 0 then
                local part = npcData.part
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if not onScreen then continue end
                
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - Camera.ViewportSize/2).Magnitude
                if distance < dist then
                    if Settings.WallCheck and not isVisible(part) then continue end
                    closest = part
                    dist = distance
                end
            end
        end
    end
    
    return closest
end

RunService.RenderStepped:Connect(function()
    if not Settings.Aimbot then return end
    local target = getClosest()
    if target then
        local predictedPosition = target.Position
        
        -- prediccion arreglada alfin
        if Settings.Prediction then
            -- Get the target's velocity (use AssemblyLinearVelocity for BaseParts)
            local targetVelocity = target.AssemblyLinearVelocity
            
            -- prediccion horizontal y vertical?? se me olvido 😭
            predictedPosition = Vector3.new(
                predictedPosition.X + (targetVelocity.X * Settings.HorizontalPrediction),
                predictedPosition.Y,
                predictedPosition.Z + (targetVelocity.Z * Settings.HorizontalPrediction)
            )
            
            -- prediccion vertical
            if Settings.VerticalPrediction > 0 then
                predictedPosition = Vector3.new(
                    predictedPosition.X,
                    predictedPosition.Y + (targetVelocity.Y * Settings.VerticalPrediction),
                    predictedPosition.Z
                )
            end
        end
        
        local direction = (predictedPosition - Camera.CFrame.Position).Unit
        local newCFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction)
        Camera.CFrame = Camera.CFrame:Lerp(newCFrame, Settings.AimStrength)
    end
end)

-- activar aiññbot con control
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.DPadDown then
        Settings.Aimbot = not Settings.Aimbot
        toggleSound:Play()
        if aimbotBtn then
            aimbotBtn.Text = "Aimbot: " .. (Settings.Aimbot and "Sip" or "Nop")
        end
    end
end)
